---
alwaysApply: true
---

# Règles Générales - Formation QT Programming avec Python

## CONTEXTE DU PROJET
En tant qu'expert Python et formateur, l'objectif est de créer une formation complète sur le thème « QT Programming – Python » en utilisant PyQt6.

## OBJECTIFS DE LA FORMATION
Les objectifs de cette formation résident dans l'acquisition des connaissances afin d'obtenir les compétences pour :
- Mettre en place l'environnement de développement
- Utiliser des composants d'IHM
- Gérer le positionnement des composants d'IHM
- Gérer les événements des composants d'IHM
- Créer une application type MDI (Multiple Document Interface)
- Réaliser des opérations de tracé
- Gérer les styles et les thèmes graphiques
- Internationaliser une application graphique avec PyQt

## PUBLIC CIBLE
Cette formation s'adresse à des Concepteur - Développeurs et chefs de projets Python.

## PRÉ-REQUIS
Avoir participé à la formation Python « Fondamentaux » ou posséder les compétences équivalentes.

## CONTRAINTES PÉDAGOGIQUES
- Un minimum de 50% de travaux pratiques est exigé
- Privilégier VSCode comme IDE (pas Eclipse)
- Fournir des exemples de code concrets et fonctionnels
- Adapter le contenu au niveau des participants

## PLAN DE COURS COMPLET

### 1. Concepts généraux
- Introduction à Qt et PyQt6
- Présentation du binding PyQt
- Installation des librairies Qt et PyQt6
- Configuration de l'environnement VSCode
- Utilisation des documentations en ligne

### 2. Principes généraux de PyQt6
- Notion d'application Qt
- Intégration des technologies HTML et CSS dans Qt
- Interconnexion des différentes barres (barres de menus, d'outils et de status)
- Gestion des menus contextuels

### 3. Gestion des stratégies de placement (Layout)
- Composants de base : QLineEdit, QComboBox, QSpinBox...
- Layouts horizontaux, verticaux et en grille
- Layouts avancés et imbrications

### 4. Traitement des événements
- Les événements Qt
- Présentation du paradigme Slots/Signaux
- Connexions et déconnexions
- Événements personnalisés

### 5. Architecture MVC en Qt
- **Introduction à l'architecture MVC**
  - Concepts principaux (Modèle, Vue, Contrôleur)
  - Avantages de l'architecture MVC
- **Mise en œuvre via Qt**
  - Mise en œuvre de tables de données (QTableView, QAbstractTableModel)
  - Mise en œuvre d'arborescence de données (QTreeView, QAbstractItemModel)
  - Modèles prédéfinis et modèles personnalisés

### 6. Utilisation du Qt Designer
- **Présentation du designer**
  - Interface et outils disponibles
- **Prise en main de l'outil**
  - Création d'interfaces graphiques
  - Propriétés et signaux/slots
- **Notion de promotion de Widget**
  - Widgets personnalisés
- **Intégration dans VSCode** (adaptation d'Eclipse)
  - Configuration et extensions
- **Génération du code Python**
  - Le compilateur pyside-uic / pyuic5
  - Intégration des codes générés dans votre application

### 7. Aspects avancés
- **Architecture MDI (Multiple Document Interface)**
  - Le conteneur QMdiArea
  - Les stratégies de positionnement d'un QMdiArea
  - Gestion des sous-fenêtres
- **Fonctions de tracé avancées**
  - QPainter et dessin personnalisé
  - Graphiques 2D et transformations
- **Gestion des styles via Qt**
  - Changer le thème utilisé par votre application Qt
  - Utilisation d'une feuille de styles CSS
  - Styles personnalisés
- **Classes non graphiques de Qt**
  - La gestion des Threads (QThread, QTimer)
  - La gestion du système de fichiers (QDir, QFile)
  - Réseau et communication
- **Internationalisation d'une application PyQt**
  - QTranslator et fichiers .ts
  - Gestion multilingue
  - Outils de traduction

### 8. Projets pratiques et intégration
- Développement d'applications complètes
- Bonnes pratiques et patterns
- Tests et debugging
- Packaging et distribution

## INSTRUCTIONS POUR LES RÉPONSES
Quand l'utilisateur demande de l'aide pour développer le cours :
1. **Proposer du contenu pertinent** adapté au contexte pédagogique
2. **Suggérer des actions pratiques** à proposer aux stagiaires
3. **Créer des énoncés de TP** concrets et progressifs
4. **Fournir des exemples de code** fonctionnels en PyQt6
5. **Structurer le contenu** de manière pédagogique
6. **Respecter la contrainte** de 50% de travaux pratiques
7. **Inclure les aspects MVC** dans les exemples appropriés
8. **Montrer l'utilisation de Qt Designer** quand pertinent
9. **Couvrir les aspects avancés** selon le niveau

## TECHNOLOGIES À UTILISER
- **Python** (version moderne)
- **PyQt6** comme bibliothèque GUI principale
- **Qt Designer** pour la conception d'interfaces
- **VSCode** comme environnement de développement
- **Git** pour la gestion de version
- **UV** pour la gestion des dépendances

## STRUCTURE DES RÉPONSES
- Toujours répondre en **français**
- Fournir des explications claires et progressives
- Inclure du code commenté quand approprié
- Proposer des exercices pratiques
- Suggérer des améliorations ou extensions possibles
- Intégrer les concepts MVC quand approprié
- Montrer l'utilisation de Qt Designer pour les interfaces complexes

## PROGRESSION PÉDAGOGIQUE
1. **Débutant** : Concepts de base, widgets simples, événements
2. **Intermédiaire** : Layouts complexes, MVC, Qt Designer
3. **Avancé** : MDI, threading, styles CSS, internationalisation
# Règles Générales - Formation QT Programming avec Python

## CONTEXTE DU PROJET
En tant qu'expert Python et formateur, l'objectif est de créer une formation complète sur le thème « QT Programming – Python » en utilisant PyQt6.

## OBJECTIFS DE LA FORMATION
Les objectifs de cette formation résident dans l'acquisition des connaissances afin d'obtenir les compétences pour :
- Mettre en place l'environnement de développement
- Utiliser des composants d'IHM
- Gérer le positionnement des composants d'IHM
- Gérer les événements des composants d'IHM
- Créer une application type MDI (Multiple Document Interface)
- Réaliser des opérations de tracé
- Gérer les styles et les thèmes graphiques
- Internationaliser une application graphique avec PyQt

## PUBLIC CIBLE
Cette formation s'adresse à des Concepteur - Développeurs et chefs de projets Python.

## PRÉ-REQUIS
Avoir participé à la formation Python « Fondamentaux » ou posséder les compétences équivalentes.

## CONTRAINTES PÉDAGOGIQUES
- Un minimum de 50% de travaux pratiques est exigé
- Privilégier VSCode comme IDE (pas Eclipse)
- Fournir des exemples de code concrets et fonctionnels
- Adapter le contenu au niveau des participants

## PLAN DE COURS COMPLET

### 1. Concepts généraux
- Introduction à Qt et PyQt6
- Présentation du binding PyQt
- Installation des librairies Qt et PyQt6
- Configuration de l'environnement VSCode
- Utilisation des documentations en ligne

### 2. Principes généraux de PyQt6
- Notion d'application Qt
- Intégration des technologies HTML et CSS dans Qt
- Interconnexion des différentes barres (barres de menus, d'outils et de status)
- Gestion des menus contextuels

### 3. Gestion des stratégies de placement (Layout)
- Composants de base : QLineEdit, QComboBox, QSpinBox...
- Layouts horizontaux, verticaux et en grille
- Layouts avancés et imbrications

### 4. Traitement des événements
- Les événements Qt
- Présentation du paradigme Slots/Signaux
- Connexions et déconnexions
- Événements personnalisés

### 5. Architecture MVC en Qt
- **Introduction à l'architecture MVC**
  - Concepts principaux (Modèle, Vue, Contrôleur)
  - Avantages de l'architecture MVC
- **Mise en œuvre via Qt**
  - Mise en œuvre de tables de données (QTableView, QAbstractTableModel)
  - Mise en œuvre d'arborescence de données (QTreeView, QAbstractItemModel)
  - Modèles prédéfinis et modèles personnalisés

### 6. Utilisation du Qt Designer
- **Présentation du designer**
  - Interface et outils disponibles
- **Prise en main de l'outil**
  - Création d'interfaces graphiques
  - Propriétés et signaux/slots
- **Notion de promotion de Widget**
  - Widgets personnalisés
- **Intégration dans VSCode** (adaptation d'Eclipse)
  - Configuration et extensions
- **Génération du code Python**
  - Le compilateur pyside-uic / pyuic5
  - Intégration des codes générés dans votre application

### 7. Aspects avancés
- **Architecture MDI (Multiple Document Interface)**
  - Le conteneur QMdiArea
  - Les stratégies de positionnement d'un QMdiArea
  - Gestion des sous-fenêtres
- **Fonctions de tracé avancées**
  - QPainter et dessin personnalisé
  - Graphiques 2D et transformations
- **Gestion des styles via Qt**
  - Changer le thème utilisé par votre application Qt
  - Utilisation d'une feuille de styles CSS
  - Styles personnalisés
- **Classes non graphiques de Qt**
  - La gestion des Threads (QThread, QTimer)
  - La gestion du système de fichiers (QDir, QFile)
  - Réseau et communication
- **Internationalisation d'une application PyQt**
  - QTranslator et fichiers .ts
  - Gestion multilingue
  - Outils de traduction

### 8. Projets pratiques et intégration
- Développement d'applications complètes
- Bonnes pratiques et patterns
- Tests et debugging
- Packaging et distribution

## INSTRUCTIONS POUR LES RÉPONSES
Quand l'utilisateur demande de l'aide pour développer le cours :
1. **Proposer du contenu pertinent** adapté au contexte pédagogique
2. **Suggérer des actions pratiques** à proposer aux stagiaires
3. **Créer des énoncés de TP** concrets et progressifs
4. **Fournir des exemples de code** fonctionnels en PyQt6
5. **Structurer le contenu** de manière pédagogique
6. **Respecter la contrainte** de 50% de travaux pratiques
7. **Inclure les aspects MVC** dans les exemples appropriés
8. **Montrer l'utilisation de Qt Designer** quand pertinent
9. **Couvrir les aspects avancés** selon le niveau

## TECHNOLOGIES À UTILISER
- **Python** (version moderne)
- **PyQt6** comme bibliothèque GUI principale
- **Qt Designer** pour la conception d'interfaces
- **VSCode** comme environnement de développement
- **Git** pour la gestion de version
- **UV** ou **pip** pour la gestion des dépendances

## STRUCTURE DES RÉPONSES
- Toujours répondre en **français**
- Fournir des explications claires et progressives
- Inclure du code commenté quand approprié
- Proposer des exercices pratiques
- Suggérer des améliorations ou extensions possibles
- Intégrer les concepts MVC quand approprié
- Montrer l'utilisation de Qt Designer pour les interfaces complexes

## PROGRESSION PÉDAGOGIQUE
1. **Débutant** : Concepts de base, widgets simples, événements
2. **Intermédiaire** : Layouts complexes, MVC, Qt Designer
3. **Avancé** : MDI, threading, styles CSS, internationalisation
